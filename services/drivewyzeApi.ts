import { 
  DrivewyzeWeighStation, 
  DrivewyzeBypassRequest, 
  DrivewyzeBypassResponse, 
  DrivewyzeNotification,
  DrivewyzeRoute,
  DrivewyzeAnalytics 
} from '@/types';\n\n// Mock Drivewyze API Service\n// In production, this would connect to the actual Drivewyze API\nclass DrivewyzeApiService {\n  private apiKey: string;\n  private baseUrl: string = 'https://api.drivewyze.com/v1';\n  private deviceId: string;\n\n  constructor(apiKey: string, deviceId: string) {\n    this.apiKey = apiKey;\n    this.deviceId = deviceId;\n  }\n\n  // Get weigh stations along a route\n  async getWeighStationsOnRoute(\n    origin: { latitude: number; longitude: number },\n    destination: { latitude: number; longitude: number },\n    radius: number = 50 // miles\n  ): Promise<DrivewyzeWeighStation[]> {\n    // Mock implementation - in production, this would make actual API calls\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(this.getMockWeighStations());\n      }, 1000);\n    });\n  }\n\n  // Get nearby weigh stations\n  async getNearbyWeighStations(\n    location: { latitude: number; longitude: number },\n    radius: number = 25 // miles\n  ): Promise<DrivewyzeWeighStation[]> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const stations = this.getMockWeighStations();\n        // Filter by distance (mock calculation)\n        const nearbyStations = stations.filter(station => {\n          const distance = this.calculateDistance(\n            location.latitude,\n            location.longitude,\n            station.location.latitude,\n            station.location.longitude\n          );\n          station.distance = distance;\n          return distance <= radius;\n        });\n        resolve(nearbyStations.sort((a, b) => (a.distance || 0) - (b.distance || 0)));\n      }, 800);\n    });\n  }\n\n  // Request bypass for a weigh station\n  async requestBypass(request: DrivewyzeBypassRequest): Promise<DrivewyzeBypassResponse> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        // Mock bypass logic\n        const isApproved = Math.random() > 0.3; // 70% approval rate\n        const response: DrivewyzeBypassResponse = {\n          requestId: `bypass_${Date.now()}`,\n          weighStationId: request.weighStationId,\n          status: isApproved ? 'approved' : 'denied',\n          message: isApproved \n            ? 'Bypass approved. Proceed past weigh station.' \n            : 'Bypass denied. Please enter weigh station for inspection.',\n          instructions: isApproved \n            ? 'Stay in right lane and maintain speed limit. Bypass expires in 30 minutes.'\n            : 'Take next exit and follow signs to weigh station entrance.',\n          expiresAt: isApproved ? new Date(Date.now() + 30 * 60 * 1000).toISOString() : undefined,\n          reasonCode: isApproved ? undefined : 'RANDOM_INSPECTION',\n          estimatedProcessingTime: 2\n        };\n        resolve(response);\n      }, 2000);\n    });\n  }\n\n  // Get weigh station status updates\n  async getWeighStationStatus(stationId: string): Promise<DrivewyzeWeighStation | null> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const stations = this.getMockWeighStations();\n        const station = stations.find(s => s.id === stationId);\n        resolve(station || null);\n      }, 500);\n    });\n  }\n\n  // Get notifications\n  async getNotifications(): Promise<DrivewyzeNotification[]> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(this.getMockNotifications());\n      }, 600);\n    });\n  }\n\n  // Get route with weigh station information\n  async getRouteWithWeighStations(\n    origin: string,\n    destination: string\n  ): Promise<DrivewyzeRoute> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const weighStations = this.getMockWeighStations();\n        const route: DrivewyzeRoute = {\n          id: `route_${Date.now()}`,\n          origin,\n          destination,\n          weighStations,\n          totalWeighStations: weighStations.length,\n          bypassEligibleStations: weighStations.filter(s => s.bypassEligible).length,\n          estimatedBypassSavings: {\n            time: 45, // minutes\n            fuel: 2.3, // gallons\n            cost: 12.50 // dollars\n          },\n          routeAlerts: this.getMockNotifications(),\n          lastUpdated: new Date().toISOString()\n        };\n        resolve(route);\n      }, 1200);\n    });\n  }\n\n  // Get analytics data\n  async getAnalytics(): Promise<DrivewyzeAnalytics> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(this.getMockAnalytics());\n      }, 800);\n    });\n  }\n\n  // Helper method to calculate distance between two points\n  private calculateDistance(\n    lat1: number,\n    lon1: number,\n    lat2: number,\n    lon2: number\n  ): number {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRadians(lat1)) *\n        Math.cos(this.toRadians(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  private toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n\n  // Mock data generators\n  private getMockWeighStations(): DrivewyzeWeighStation[] {\n    return [\n      {\n        id: 'ws_001',\n        name: 'I-75 Northbound Weigh Station',\n        location: {\n          latitude: 39.1612,\n          longitude: -84.4569,\n          address: 'I-75 North, Mile Marker 185',\n          state: 'OH',\n          highway: 'I-75',\n          mileMarker: 185\n        },\n        status: 'open',\n        operatingHours: {\n          monday: '6:00 AM - 10:00 PM',\n          tuesday: '6:00 AM - 10:00 PM',\n          wednesday: '6:00 AM - 10:00 PM',\n          thursday: '6:00 AM - 10:00 PM',\n          friday: '6:00 AM - 10:00 PM',\n          saturday: '8:00 AM - 6:00 PM',\n          sunday: 'Closed'\n        },\n        bypassEligible: true,\n        services: ['Weight Check', 'DOT Inspection', 'Permit Verification'],\n        restrictions: {\n          maxWeight: 80000,\n          maxHeight: 13.5,\n          maxLength: 65\n        },\n        contact: {\n          phone: '(513) 555-0123'\n        },\n        lastUpdated: new Date().toISOString(),\n        distance: 12.5\n      },\n      {\n        id: 'ws_002',\n        name: 'I-70 Eastbound Weigh Station',\n        location: {\n          latitude: 39.9612,\n          longitude: -83.0007,\n          address: 'I-70 East, Mile Marker 112',\n          state: 'OH',\n          highway: 'I-70',\n          mileMarker: 112\n        },\n        status: 'bypass_available',\n        operatingHours: {\n          monday: '24 Hours',\n          tuesday: '24 Hours',\n          wednesday: '24 Hours',\n          thursday: '24 Hours',\n          friday: '24 Hours',\n          saturday: '24 Hours',\n          sunday: '24 Hours'\n        },\n        bypassEligible: true,\n        bypassStatus: 'approved',\n        services: ['Weight Check', 'Safety Inspection', 'Fuel Tax Audit'],\n        restrictions: {\n          maxWeight: 80000,\n          maxHeight: 13.5,\n          hazmatRestrictions: ['Explosives', 'Radioactive']\n        },\n        contact: {\n          phone: '(614) 555-0456',\n          website: 'https://dot.state.oh.us'\n        },\n        lastUpdated: new Date().toISOString(),\n        distance: 28.3\n      },\n      {\n        id: 'ws_003',\n        name: 'I-71 Southbound Weigh Station',\n        location: {\n          latitude: 40.0583,\n          longitude: -82.9988,\n          address: 'I-71 South, Mile Marker 131',\n          state: 'OH',\n          highway: 'I-71',\n          mileMarker: 131\n        },\n        status: 'closed',\n        operatingHours: {\n          monday: '7:00 AM - 7:00 PM',\n          tuesday: '7:00 AM - 7:00 PM',\n          wednesday: '7:00 AM - 7:00 PM',\n          thursday: '7:00 AM - 7:00 PM',\n          friday: '7:00 AM - 7:00 PM',\n          saturday: 'Closed',\n          sunday: 'Closed'\n        },\n        bypassEligible: false,\n        services: ['Weight Check', 'Vehicle Inspection'],\n        restrictions: {\n          maxWeight: 80000,\n          maxHeight: 13.5,\n          maxLength: 65\n        },\n        contact: {\n          phone: '(614) 555-0789'\n        },\n        lastUpdated: new Date().toISOString(),\n        distance: 35.7\n      },\n      {\n        id: 'ws_004',\n        name: 'I-77 Northbound Weigh Station',\n        location: {\n          latitude: 40.4173,\n          longitude: -81.4784,\n          address: 'I-77 North, Mile Marker 93',\n          state: 'OH',\n          highway: 'I-77',\n          mileMarker: 93\n        },\n        status: 'maintenance',\n        operatingHours: {\n          monday: 'Closed for Maintenance',\n          tuesday: 'Closed for Maintenance',\n          wednesday: 'Closed for Maintenance',\n          thursday: 'Closed for Maintenance',\n          friday: 'Closed for Maintenance',\n          saturday: 'Closed for Maintenance',\n          sunday: 'Closed for Maintenance'\n        },\n        bypassEligible: false,\n        services: ['Weight Check'],\n        restrictions: {\n          maxWeight: 80000\n        },\n        contact: {\n          phone: '(330) 555-0321'\n        },\n        lastUpdated: new Date().toISOString(),\n        distance: 42.1\n      }\n    ];\n  }\n\n  private getMockNotifications(): DrivewyzeNotification[] {\n    return [\n      {\n        id: 'notif_001',\n        type: 'bypass_approved',\n        weighStationId: 'ws_001',\n        title: 'Bypass Approved',\n        message: 'Your bypass request for I-75 Northbound Weigh Station has been approved.',\n        priority: 'high',\n        timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),\n        expiresAt: new Date(Date.now() + 25 * 60 * 1000).toISOString(),\n        actionRequired: false,\n        location: {\n          latitude: 39.1612,\n          longitude: -84.4569,\n          distance: 12.5\n        }\n      },\n      {\n        id: 'notif_002',\n        type: 'weigh_station_ahead',\n        weighStationId: 'ws_002',\n        title: 'Weigh Station Ahead',\n        message: 'I-70 Eastbound Weigh Station is 15 miles ahead. Bypass available.',\n        priority: 'medium',\n        timestamp: new Date(Date.now() - 10 * 60 * 1000).toISOString(),\n        actionRequired: true,\n        actions: [\n          {\n            label: 'Request Bypass',\n            action: 'request_bypass'\n          },\n          {\n            label: 'View Details',\n            action: 'view_details'\n          }\n        ],\n        location: {\n          latitude: 39.9612,\n          longitude: -83.0007,\n          distance: 28.3\n        }\n      },\n      {\n        id: 'notif_003',\n        type: 'status_change',\n        weighStationId: 'ws_003',\n        title: 'Station Status Changed',\n        message: 'I-71 Southbound Weigh Station is now closed.',\n        priority: 'low',\n        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n        actionRequired: false\n      }\n    ];\n  }\n\n  private getMockAnalytics(): DrivewyzeAnalytics {\n    return {\n      totalBypassRequests: 156,\n      approvedBypasses: 134,\n      deniedBypasses: 22,\n      timeSaved: 1680, // minutes\n      fuelSaved: 89.5, // gallons\n      costSaved: 485.75, // dollars\n      complianceScore: 94,\n      lastUpdated: new Date().toISOString(),\n      monthlyStats: [\n        {\n          month: 'January 2024',\n          bypasses: 45,\n          timeSaved: 540,\n          fuelSaved: 28.5,\n          costSaved: 155.25\n        },\n        {\n          month: 'February 2024',\n          bypasses: 52,\n          timeSaved: 624,\n          fuelSaved: 33.2,\n          costSaved: 180.50\n        },\n        {\n          month: 'March 2024',\n          bypasses: 59,\n          timeSaved: 708,\n          fuelSaved: 37.8,\n          costSaved: 205.75\n        }\n      ]\n    };\n  }\n}\n\n// Export singleton instance\nexport const drivewyzeApi = new DrivewyzeApiService(\n  process.env.EXPO_PUBLIC_DRIVEWYZE_API_KEY || 'demo_key',\n  process.env.EXPO_PUBLIC_DRIVEWYZE_DEVICE_ID || 'demo_device'\n);\n\nexport default DrivewyzeApiService;\n