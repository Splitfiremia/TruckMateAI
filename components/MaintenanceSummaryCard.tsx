import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity\n} from 'react-native';\nimport {\n  Wrench,\n  AlertTriangle,\n  Clock,\n  TrendingUp,\n  ChevronRight,\n  Activity\n} from 'lucide-react-native';\nimport { router } from 'expo-router';\n\nimport { colors } from '@/constants/colors';\nimport { usePredictiveMaintenanceStore } from '@/store/predictiveMaintenanceStore';\n\nconst MaintenanceSummaryCard: React.FC = () => {\n  const {\n    vehicleHealth,\n    alerts,\n    predictions,\n    isAnalyzing,\n    lastAnalysis\n  } = usePredictiveMaintenanceStore();\n\n  const activeAlerts = alerts.filter(alert => !alert.dismissed && !alert.resolvedAt);\n  const criticalAlerts = activeAlerts.filter(alert => alert.priority === 'Critical');\n  const upcomingMaintenance = predictions.filter(pred => pred.milesUntilFailure < 5000);\n\n  const getHealthColor = (score: number) => {\n    if (score >= 85) return colors.secondary;\n    if (score >= 70) return colors.warning;\n    return colors.danger;\n  };\n\n  const getHealthStatus = (score: number) => {\n    if (score >= 85) return 'Excellent';\n    if (score >= 70) return 'Good';\n    return 'Needs Attention';\n  };\n\n  const handlePress = () => {\n    router.push('/(tabs)/maintenance');\n  };\n\n  if (!vehicleHealth && !isAnalyzing && activeAlerts.length === 0) {\n    return (\n      <TouchableOpacity style={styles.container} onPress={handlePress}>\n        <View style={styles.header}>\n          <View style={styles.titleRow}>\n            <Wrench color={colors.primaryLight} size={20} />\n            <Text style={styles.title}>AI Maintenance</Text>\n          </View>\n          <ChevronRight color={colors.textSecondary} size={16} />\n        </View>\n        <Text style={styles.noDataText}>\n          Tap to start AI-powered predictive maintenance analysis\n        </Text>\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <TouchableOpacity style={styles.container} onPress={handlePress}>\n      <View style={styles.header}>\n        <View style={styles.titleRow}>\n          <Wrench color={colors.primaryLight} size={20} />\n          <Text style={styles.title}>AI Maintenance</Text>\n          {isAnalyzing && <Activity color={colors.primaryLight} size={16} />}\n        </View>\n        <ChevronRight color={colors.textSecondary} size={16} />\n      </View>\n\n      {/* Vehicle Health Score */}\n      {vehicleHealth && (\n        <View style={styles.healthSection}>\n          <View style={styles.healthScore}>\n            <Text style={[\n              styles.scoreText,\n              { color: getHealthColor(vehicleHealth.overallScore) }\n            ]}>\n              {vehicleHealth.overallScore}\n            </Text>\n            <Text style={styles.scoreLabel}>Health Score</Text>\n          </View>\n          <View style={styles.healthDetails}>\n            <Text style={styles.healthStatus}>\n              {getHealthStatus(vehicleHealth.overallScore)}\n            </Text>\n            <Text style={styles.reliabilityText}>\n              {vehicleHealth.predictedReliability}% reliability next 30 days\n            </Text>\n          </View>\n        </View>\n      )}\n\n      {/* Alerts Summary */}\n      <View style={styles.alertsSection}>\n        <View style={styles.alertsGrid}>\n          <View style={styles.alertItem}>\n            <AlertTriangle \n              color={criticalAlerts.length > 0 ? colors.danger : colors.textSecondary} \n              size={16} \n            />\n            <Text style={[\n              styles.alertNumber,\n              { color: criticalAlerts.length > 0 ? colors.danger : colors.textSecondary }\n            ]}>\n              {criticalAlerts.length}\n            </Text>\n            <Text style={styles.alertLabel}>Critical</Text>\n          </View>\n          \n          <View style={styles.alertItem}>\n            <Clock \n              color={upcomingMaintenance.length > 0 ? colors.warning : colors.textSecondary} \n              size={16} \n            />\n            <Text style={[\n              styles.alertNumber,\n              { color: upcomingMaintenance.length > 0 ? colors.warning : colors.textSecondary }\n            ]}>\n              {upcomingMaintenance.length}\n            </Text>\n            <Text style={styles.alertLabel}>Upcoming</Text>\n          </View>\n          \n          <View style={styles.alertItem}>\n            <TrendingUp \n              color={predictions.length > 0 ? colors.primaryLight : colors.textSecondary} \n              size={16} \n            />\n            <Text style={[\n              styles.alertNumber,\n              { color: predictions.length > 0 ? colors.primaryLight : colors.textSecondary }\n            ]}>\n              {predictions.length}\n            </Text>\n            <Text style={styles.alertLabel}>Predictions</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Most Urgent Alert */}\n      {activeAlerts.length > 0 && (\n        <View style={styles.urgentAlert}>\n          <AlertTriangle \n            color={activeAlerts[0].priority === 'Critical' ? colors.danger : colors.warning} \n            size={14} \n          />\n          <Text style={styles.urgentAlertText} numberOfLines={1}>\n            {activeAlerts[0].title}: {activeAlerts[0].message}\n          </Text>\n        </View>\n      )}\n\n      {/* Next Predicted Maintenance */}\n      {upcomingMaintenance.length > 0 && (\n        <View style={styles.nextMaintenance}>\n          <Wrench color={colors.primaryLight} size={14} />\n          <Text style={styles.nextMaintenanceText} numberOfLines={1}>\n            Next: {upcomingMaintenance[0].componentName} in {upcomingMaintenance[0].milesUntilFailure.toLocaleString()} miles\n          </Text>\n        </View>\n      )}\n\n      {/* Analysis Status */}\n      <View style={styles.footer}>\n        <Text style={styles.analysisStatus}>\n          {isAnalyzing ? 'Analyzing vehicle data...' :\n           lastAnalysis ? `Last analysis: ${new Date(lastAnalysis).toLocaleTimeString()}` :\n           'Tap to run AI analysis'}\n        </Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  titleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  title: {\n    color: colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  noDataText: {\n    color: colors.textSecondary,\n    fontSize: 14,\n    textAlign: 'center',\n    paddingVertical: 20,\n  },\n  healthSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n    paddingBottom: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n  },\n  healthScore: {\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  scoreText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n  scoreLabel: {\n    color: colors.textSecondary,\n    fontSize: 10,\n    marginTop: 2,\n  },\n  healthDetails: {\n    flex: 1,\n  },\n  healthStatus: {\n    color: colors.text,\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 4,\n  },\n  reliabilityText: {\n    color: colors.textSecondary,\n    fontSize: 12,\n  },\n  alertsSection: {\n    marginBottom: 16,\n  },\n  alertsGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  alertItem: {\n    alignItems: 'center',\n    gap: 4,\n  },\n  alertNumber: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  alertLabel: {\n    color: colors.textSecondary,\n    fontSize: 10,\n  },\n  urgentAlert: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: colors.backgroundLight,\n    padding: 8,\n    borderRadius: 6,\n    marginBottom: 8,\n  },\n  urgentAlertText: {\n    color: colors.text,\n    fontSize: 12,\n    flex: 1,\n  },\n  nextMaintenance: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: colors.backgroundLight,\n    padding: 8,\n    borderRadius: 6,\n    marginBottom: 8,\n  },\n  nextMaintenanceText: {\n    color: colors.text,\n    fontSize: 12,\n    flex: 1,\n  },\n  footer: {\n    paddingTop: 8,\n    borderTopWidth: 1,\n    borderTopColor: colors.border,\n  },\n  analysisStatus: {\n    color: colors.textSecondary,\n    fontSize: 11,\n    textAlign: 'center',\n  },\n});\n\nexport default MaintenanceSummaryCard;