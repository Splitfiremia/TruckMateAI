import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity\n} from 'react-native';\nimport {\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  TrendingUp,\n  TrendingDown,\n  Minus\n} from 'lucide-react-native';\n\nimport { colors } from '@/constants/colors';\nimport { VehicleHealth } from '@/types';\n\ninterface VehicleHealthDashboardProps {\n  vehicleHealth: VehicleHealth;\n  onSystemPress?: (system: string) => void;\n}\n\nconst VehicleHealthDashboard: React.FC<VehicleHealthDashboardProps> = ({\n  vehicleHealth,\n  onSystemPress\n}) => {\n  const getHealthColor = (score: number) => {\n    if (score >= 85) return colors.secondary;\n    if (score >= 70) return colors.warning;\n    return colors.danger;\n  };\n\n  const getHealthIcon = (score: number) => {\n    if (score >= 85) return CheckCircle;\n    if (score >= 70) return AlertTriangle;\n    return AlertTriangle;\n  };\n\n  const getTrendIcon = (score: number) => {\n    if (score >= 85) return TrendingUp;\n    if (score >= 70) return Minus;\n    return TrendingDown;\n  };\n\n  const getSystemDisplayName = (system: string) => {\n    const names: { [key: string]: string } = {\n      engine: 'Engine',\n      transmission: 'Transmission',\n      brakes: 'Brakes',\n      tires: 'Tires',\n      electrical: 'Electrical',\n      cooling: 'Cooling',\n      fuel: 'Fuel System'\n    };\n    return names[system] || system;\n  };\n\n  const HealthIcon = getHealthIcon(vehicleHealth.overallScore);\n  const TrendIcon = getTrendIcon(vehicleHealth.overallScore);\n  const healthColor = getHealthColor(vehicleHealth.overallScore);\n\n  return (\n    <View style={styles.container}>\n      {/* Overall Health Score */}\n      <View style={styles.overallHealth}>\n        <View style={styles.scoreSection}>\n          <View style={[styles.scoreCircle, { borderColor: healthColor }]}>\n            <Text style={[styles.scoreText, { color: healthColor }]}>\n              {vehicleHealth.overallScore}\n            </Text>\n            <Text style={styles.scoreLabel}>Health</Text>\n          </View>\n          <View style={styles.scoreDetails}>\n            <View style={styles.scoreDetailItem}>\n              <HealthIcon color={healthColor} size={16} />\n              <Text style={styles.scoreDetailText}>\n                {vehicleHealth.overallScore >= 85 ? 'Excellent' :\n                 vehicleHealth.overallScore >= 70 ? 'Good' : 'Needs Attention'}\n              </Text>\n            </View>\n            <View style={styles.scoreDetailItem}>\n              <TrendIcon color={healthColor} size={16} />\n              <Text style={styles.scoreDetailText}>\n                {vehicleHealth.predictedReliability}% Reliability\n              </Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Quick Stats */}\n        <View style={styles.quickStats}>\n          <View style={styles.statItem}>\n            <AlertTriangle color={colors.danger} size={16} />\n            <Text style={styles.statNumber}>{vehicleHealth.criticalIssues}</Text>\n            <Text style={styles.statLabel}>Critical</Text>\n          </View>\n          <View style={styles.statItem}>\n            <Clock color={colors.warning} size={16} />\n            <Text style={styles.statNumber}>{vehicleHealth.upcomingMaintenance}</Text>\n            <Text style={styles.statLabel}>Upcoming</Text>\n          </View>\n          <View style={styles.statItem}>\n            <Activity color={colors.primaryLight} size={16} />\n            <Text style={styles.statNumber}>\n              {Object.values(vehicleHealth.systemHealth).filter(score => score < 70).length}\n            </Text>\n            <Text style={styles.statLabel}>At Risk</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* System Health Grid */}\n      <View style={styles.systemsSection}>\n        <Text style={styles.sectionTitle}>System Health</Text>\n        <View style={styles.systemsGrid}>\n          {Object.entries(vehicleHealth.systemHealth).map(([system, score]) => {\n            const SystemIcon = getHealthIcon(score);\n            const systemColor = getHealthColor(score);\n            \n            return (\n              <TouchableOpacity\n                key={system}\n                style={[styles.systemCard, { borderColor: systemColor }]}\n                onPress={() => onSystemPress?.(system)}\n                activeOpacity={0.7}\n              >\n                <View style={styles.systemHeader}>\n                  <SystemIcon color={systemColor} size={16} />\n                  <Text style={[styles.systemScore, { color: systemColor }]}>\n                    {score}%\n                  </Text>\n                </View>\n                <Text style={styles.systemName}>\n                  {getSystemDisplayName(system)}\n                </Text>\n                <View style={styles.systemBar}>\n                  <View\n                    style={[\n                      styles.systemBarFill,\n                      {\n                        width: `${score}%`,\n                        backgroundColor: systemColor\n                      }\n                    ]}\n                  />\n                </View>\n              </TouchableOpacity>\n            );\n          })}\n        </View>\n      </View>\n\n      {/* Recommended Actions */}\n      {vehicleHealth.recommendedActions.length > 0 && (\n        <View style={styles.actionsSection}>\n          <Text style={styles.sectionTitle}>Recommended Actions</Text>\n          <View style={styles.actionsList}>\n            {vehicleHealth.recommendedActions.slice(0, 3).map((action, index) => (\n              <View key={index} style={styles.actionItem}>\n                <View style={styles.actionBullet} />\n                <Text style={styles.actionText}>{action}</Text>\n              </View>\n            ))}\n          </View>\n        </View>\n      )}\n\n      {/* Last Updated */}\n      <View style={styles.footer}>\n        <Text style={styles.lastUpdated}>\n          Last updated: {new Date(vehicleHealth.lastUpdated).toLocaleString()}\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.card,\n    borderRadius: 12,\n    padding: 16,\n  },\n  overallHealth: {\n    marginBottom: 24,\n  },\n  scoreSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  scoreCircle: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    borderWidth: 3,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 20,\n  },\n  scoreText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n  scoreLabel: {\n    color: colors.textSecondary,\n    fontSize: 10,\n    marginTop: 2,\n  },\n  scoreDetails: {\n    flex: 1,\n  },\n  scoreDetailItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  scoreDetailText: {\n    color: colors.text,\n    fontSize: 14,\n  },\n  quickStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    paddingVertical: 16,\n    backgroundColor: colors.backgroundLight,\n    borderRadius: 8,\n  },\n  statItem: {\n    alignItems: 'center',\n    gap: 4,\n  },\n  statNumber: {\n    color: colors.text,\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  statLabel: {\n    color: colors.textSecondary,\n    fontSize: 10,\n  },\n  systemsSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    color: colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 12,\n  },\n  systemsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  systemCard: {\n    backgroundColor: colors.backgroundLight,\n    borderRadius: 8,\n    padding: 12,\n    width: '47%',\n    borderWidth: 1,\n  },\n  systemHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  systemScore: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  systemName: {\n    color: colors.text,\n    fontSize: 12,\n    marginBottom: 8,\n  },\n  systemBar: {\n    height: 4,\n    backgroundColor: colors.border,\n    borderRadius: 2,\n  },\n  systemBarFill: {\n    height: '100%',\n    borderRadius: 2,\n  },\n  actionsSection: {\n    marginBottom: 16,\n  },\n  actionsList: {\n    gap: 8,\n  },\n  actionItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 12,\n  },\n  actionBullet: {\n    width: 6,\n    height: 6,\n    borderRadius: 3,\n    backgroundColor: colors.primaryLight,\n    marginTop: 6,\n  },\n  actionText: {\n    color: colors.text,\n    fontSize: 14,\n    flex: 1,\n    lineHeight: 18,\n  },\n  footer: {\n    borderTopWidth: 1,\n    borderTopColor: colors.border,\n    paddingTop: 12,\n  },\n  lastUpdated: {\n    color: colors.textSecondary,\n    fontSize: 12,\n    textAlign: 'center',\n  },\n});\n\nexport default VehicleHealthDashboard;