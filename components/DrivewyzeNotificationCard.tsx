import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet } from 'react-native';\nimport { CheckCircle, XCircle, AlertTriangle, MapPin, Clock, Bell } from 'lucide-react-native';\nimport { DrivewyzeNotification } from '@/types';\nimport { colors } from '@/constants/colors';\n\ninterface DrivewyzeNotificationCardProps {\n  notification: DrivewyzeNotification;\n  onPress?: () => void;\n  onAction?: (action: string) => void;\n  onDismiss?: () => void;\n}\n\nexport const DrivewyzeNotificationCard: React.FC<DrivewyzeNotificationCardProps> = ({\n  notification,\n  onPress,\n  onAction,\n  onDismiss\n}) => {\n  const getTypeIcon = () => {\n    switch (notification.type) {\n      case 'bypass_approved':\n        return <CheckCircle size={20} color={colors.success} />;\n      case 'bypass_denied':\n        return <XCircle size={20} color={colors.danger} />;\n      case 'weigh_station_ahead':\n        return <MapPin size={20} color={colors.warning} />;\n      case 'status_change':\n        return <Bell size={20} color={colors.primary} />;\n      case 'inspection_required':\n        return <AlertTriangle size={20} color={colors.danger} />;\n      default:\n        return <Bell size={20} color={colors.primary} />;\n    }\n  };\n\n  const getPriorityColor = () => {\n    switch (notification.priority) {\n      case 'critical':\n        return colors.danger;\n      case 'high':\n        return colors.warning;\n      case 'medium':\n        return colors.primary;\n      case 'low':\n        return colors.text.secondary;\n      default:\n        return colors.primary;\n    }\n  };\n\n  const getTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const notificationTime = new Date(timestamp);\n    const diffInMinutes = Math.floor((now.getTime() - notificationTime.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  return (\n    <TouchableOpacity \n      style={[\n        styles.container,\n        notification.actionRequired && styles.actionRequired\n      ]} \n      onPress={onPress} \n      activeOpacity={0.7}\n    >\n      <View style={styles.header}>\n        <View style={styles.iconContainer}>\n          {getTypeIcon()}\n        </View>\n        \n        <View style={styles.titleContainer}>\n          <Text style={styles.title} numberOfLines={1}>\n            {notification.title}\n          </Text>\n          <View style={styles.metaRow}>\n            <Clock size={12} color={colors.text.secondary} />\n            <Text style={styles.timestamp}>\n              {getTimeAgo(notification.timestamp)}\n            </Text>\n            <View style={[\n              styles.priorityBadge, \n              { backgroundColor: getPriorityColor() }\n            ]}>\n              <Text style={styles.priorityText}>\n                {notification.priority.toUpperCase()}\n              </Text>\n            </View>\n          </View>\n        </View>\n        \n        {onDismiss && (\n          <TouchableOpacity \n            style={styles.dismissButton} \n            onPress={onDismiss}\n            hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}\n          >\n            <XCircle size={16} color={colors.text.secondary} />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      <Text style={styles.message} numberOfLines={3}>\n        {notification.message}\n      </Text>\n\n      {notification.location && (\n        <View style={styles.locationContainer}>\n          <MapPin size={14} color={colors.text.secondary} />\n          <Text style={styles.locationText}>\n            {notification.location.distance.toFixed(1)} miles away\n          </Text>\n        </View>\n      )}\n\n      {notification.expiresAt && (\n        <View style={styles.expiryContainer}>\n          <Clock size={14} color={colors.warning} />\n          <Text style={styles.expiryText}>\n            Expires: {new Date(notification.expiresAt).toLocaleTimeString()}\n          </Text>\n        </View>\n      )}\n\n      {notification.actions && notification.actions.length > 0 && (\n        <View style={styles.actionsContainer}>\n          {notification.actions.map((action, index) => (\n            <TouchableOpacity\n              key={index}\n              style={[\n                styles.actionButton,\n                index === 0 && styles.primaryActionButton\n              ]}\n              onPress={() => onAction?.(action.action)}\n              activeOpacity={0.7}\n            >\n              <Text style={[\n                styles.actionButtonText,\n                index === 0 && styles.primaryActionButtonText\n              ]}>\n                {action.label}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      )}\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginVertical: 6,\n    marginHorizontal: 16,\n    shadowColor: colors.black,\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  actionRequired: {\n    borderLeftWidth: 4,\n    borderLeftColor: colors.primary,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  iconContainer: {\n    marginRight: 12,\n    marginTop: 2,\n  },\n  titleContainer: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: colors.text.primary,\n    marginBottom: 4,\n  },\n  metaRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  timestamp: {\n    fontSize: 12,\n    color: colors.text.secondary,\n  },\n  priorityBadge: {\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  priorityText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: colors.white,\n  },\n  dismissButton: {\n    padding: 4,\n  },\n  message: {\n    fontSize: 14,\n    color: colors.text.primary,\n    lineHeight: 20,\n    marginBottom: 12,\n  },\n  locationContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    marginBottom: 8,\n  },\n  locationText: {\n    fontSize: 12,\n    color: colors.text.secondary,\n  },\n  expiryContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    marginBottom: 12,\n  },\n  expiryText: {\n    fontSize: 12,\n    color: colors.warning,\n    fontWeight: '500',\n  },\n  actionsContainer: {\n    flexDirection: 'row',\n    gap: 8,\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: colors.border,\n  },\n  actionButton: {\n    flex: 1,\n    paddingVertical: 10,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.primary,\n    alignItems: 'center',\n  },\n  primaryActionButton: {\n    backgroundColor: colors.primary,\n  },\n  actionButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: colors.primary,\n  },\n  primaryActionButtonText: {\n    color: colors.white,\n  },\n});\n