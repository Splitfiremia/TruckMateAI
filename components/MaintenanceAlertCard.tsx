import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Alert\n} from 'react-native';\nimport {\n  AlertTriangle,\n  Clock,\n  MapPin,\n  Wrench,\n  X\n} from 'lucide-react-native';\n\nimport { colors } from '@/constants/colors';\nimport { MaintenanceAlert } from '@/types';\n\ninterface MaintenanceAlertCardProps {\n  alert: MaintenanceAlert;\n  onDismiss: (alertId: string) => void;\n  onViewShops: (alert: MaintenanceAlert) => void;\n}\n\nconst MaintenanceAlertCard: React.FC<MaintenanceAlertCardProps> = ({\n  alert,\n  onDismiss,\n  onViewShops\n}) => {\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'Critical': return colors.danger;\n      case 'High': return colors.warning;\n      case 'Medium': return colors.primaryLight;\n      case 'Low': return colors.secondary;\n      default: return colors.textSecondary;\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'Prediction': return AlertTriangle;\n      case 'Immediate': return AlertTriangle;\n      case 'Scheduled': return Clock;\n      case 'Overdue': return AlertTriangle;\n      default: return AlertTriangle;\n    }\n  };\n\n  const TypeIcon = getTypeIcon(alert.type);\n  const priorityColor = getPriorityColor(alert.priority);\n\n  const handleViewShops = () => {\n    if (alert.nearbyShops.length > 0 || alert.estimatedCost > 0) {\n      onViewShops(alert);\n    } else {\n      Alert.alert(\n        'No Shops Available',\n        'No nearby repair shops found for this service. Please try again later.',\n        [{ text: 'OK' }]\n      );\n    }\n  };\n\n  return (\n    <View style={[styles.container, { borderLeftColor: priorityColor }]}>\n      <View style={styles.header}>\n        <View style={styles.titleRow}>\n          <TypeIcon color={priorityColor} size={18} />\n          <Text style={styles.title}>{alert.title}</Text>\n          <View style={[styles.priorityBadge, { backgroundColor: priorityColor }]}>\n            <Text style={styles.priorityText}>{alert.priority}</Text>\n          </View>\n        </View>\n        <TouchableOpacity\n          onPress={() => onDismiss(alert.id)}\n          style={styles.dismissButton}\n        >\n          <X color={colors.textSecondary} size={16} />\n        </TouchableOpacity>\n      </View>\n\n      <Text style={styles.message}>{alert.message}</Text>\n\n      <View style={styles.details}>\n        <View style={styles.detailItem}>\n          <Wrench color={colors.textSecondary} size={14} />\n          <Text style={styles.detailText}>{alert.component}</Text>\n        </View>\n        \n        {alert.dueDate && (\n          <View style={styles.detailItem}>\n            <Clock color={colors.textSecondary} size={14} />\n            <Text style={styles.detailText}>\n              Due: {new Date(alert.dueDate).toLocaleDateString()}\n            </Text>\n          </View>\n        )}\n        \n        {alert.estimatedCost > 0 && (\n          <View style={styles.detailItem}>\n            <Text style={styles.costText}>${alert.estimatedCost}</Text>\n          </View>\n        )}\n      </View>\n\n      {alert.actionRequired && (\n        <View style={styles.actions}>\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={handleViewShops}\n          >\n            <MapPin color={colors.primaryLight} size={16} />\n            <Text style={styles.actionButtonText}>Find Shops</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderLeftWidth: 4,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  titleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    flex: 1,\n  },\n  title: {\n    color: colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n    flex: 1,\n  },\n  priorityBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  priorityText: {\n    color: colors.text,\n    fontSize: 10,\n    fontWeight: '600',\n  },\n  dismissButton: {\n    padding: 4,\n  },\n  message: {\n    color: colors.textSecondary,\n    fontSize: 14,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  details: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 16,\n    marginBottom: 12,\n  },\n  detailItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  detailText: {\n    color: colors.textSecondary,\n    fontSize: 12,\n  },\n  costText: {\n    color: colors.warning,\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  actions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: colors.backgroundLight,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.primaryLight,\n  },\n  actionButtonText: {\n    color: colors.primaryLight,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n});\n\nexport default MaintenanceAlertCard;