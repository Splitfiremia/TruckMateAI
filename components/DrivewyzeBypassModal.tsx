import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  Modal,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  TextInput,\n  Alert,\n  ActivityIndicator,\n} from 'react-native';\nimport { X, Truck, MapPin, Clock, AlertTriangle, CheckCircle } from 'lucide-react-native';\nimport { DrivewyzeWeighStation, DrivewyzeBypassRequest } from '@/types';\nimport { colors } from '@/constants/colors';\nimport { useDrivewyzeStore } from '@/store/drivewyzeStore';\n\ninterface DrivewyzeBypassModalProps {\n  visible: boolean;\n  station: DrivewyzeWeighStation | null;\n  onClose: () => void;\n}\n\nexport const DrivewyzeBypassModal: React.FC<DrivewyzeBypassModalProps> = ({\n  visible,\n  station,\n  onClose,\n}) => {\n  const { requestBypass, loading } = useDrivewyzeStore();\n  const [vehicleInfo, setVehicleInfo] = useState({\n    weight: '',\n    height: '',\n    length: '',\n    width: '',\n    axles: '',\n    hazmat: false,\n  });\n  const [driverId, setDriverId] = useState('DRIVER001');\n  const [vehicleId, setVehicleId] = useState('TRUCK001');\n\n  const handleSubmit = async () => {\n    if (!station) return;\n\n    // Validate required fields\n    if (!vehicleInfo.weight || !vehicleInfo.height || !vehicleInfo.length) {\n      Alert.alert('Missing Information', 'Please fill in all required vehicle dimensions.');\n      return;\n    }\n\n    const request: DrivewyzeBypassRequest = {\n      weighStationId: station.id,\n      vehicleId,\n      driverId,\n      currentLocation: {\n        latitude: 39.1612, // Mock current location\n        longitude: -84.4569,\n      },\n      vehicleInfo: {\n        weight: parseFloat(vehicleInfo.weight),\n        height: parseFloat(vehicleInfo.height),\n        length: parseFloat(vehicleInfo.length),\n        width: parseFloat(vehicleInfo.width) || 8.5,\n        axles: parseInt(vehicleInfo.axles) || 5,\n        hazmat: vehicleInfo.hazmat,\n      },\n      complianceStatus: {\n        hoursOfService: 'compliant',\n        logbook: 'current',\n        inspection: 'current',\n        registration: 'valid',\n        insurance: 'valid',\n      },\n    };\n\n    try {\n      const response = await requestBypass(request);\n      if (response) {\n        Alert.alert(\n          response.status === 'approved' ? 'Bypass Approved!' : 'Bypass Denied',\n          response.message,\n          [\n            {\n              text: 'OK',\n              onPress: onClose,\n            },\n          ]\n        );\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to submit bypass request. Please try again.');\n    }\n  };\n\n  if (!station) return null;\n\n  return (\n    <Modal\n      visible={visible}\n      animationType=\"slide\"\n      presentationStyle=\"pageSheet\"\n      onRequestClose={onClose}\n    >\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Request Bypass</Text>\n          <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n            <X size={24} color={colors.text.primary} />\n          </TouchableOpacity>\n        </View>\n\n        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n          {/* Station Information */}\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <MapPin size={20} color={colors.primary} />\n              <Text style={styles.sectionTitle}>Weigh Station</Text>\n            </View>\n            <View style={styles.stationCard}>\n              <Text style={styles.stationName}>{station.name}</Text>\n              <Text style={styles.stationAddress}>{station.location.address}</Text>\n              <View style={styles.stationMeta}>\n                <Text style={styles.stationMetaText}>Highway: {station.location.highway}</Text>\n                {station.location.mileMarker && (\n                  <Text style={styles.stationMetaText}>Mile {station.location.mileMarker}</Text>\n                )}\n              </View>\n            </View>\n          </View>\n\n          {/* Vehicle Information */}\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <Truck size={20} color={colors.primary} />\n              <Text style={styles.sectionTitle}>Vehicle Information</Text>\n            </View>\n            \n            <View style={styles.inputRow}>\n              <View style={styles.inputContainer}>\n                <Text style={styles.inputLabel}>Weight (lbs) *</Text>\n                <TextInput\n                  style={styles.input}\n                  value={vehicleInfo.weight}\n                  onChangeText={(text) => setVehicleInfo(prev => ({ ...prev, weight: text }))}\n                  placeholder=\"80000\"\n                  keyboardType=\"numeric\"\n                />\n              </View>\n              <View style={styles.inputContainer}>\n                <Text style={styles.inputLabel}>Height (ft) *</Text>\n                <TextInput\n                  style={styles.input}\n                  value={vehicleInfo.height}\n                  onChangeText={(text) => setVehicleInfo(prev => ({ ...prev, height: text }))}\n                  placeholder=\"13.5\"\n                  keyboardType=\"numeric\"\n                />\n              </View>\n            </View>\n\n            <View style={styles.inputRow}>\n              <View style={styles.inputContainer}>\n                <Text style={styles.inputLabel}>Length (ft) *</Text>\n                <TextInput\n                  style={styles.input}\n                  value={vehicleInfo.length}\n                  onChangeText={(text) => setVehicleInfo(prev => ({ ...prev, length: text }))}\n                  placeholder=\"65\"\n                  keyboardType=\"numeric\"\n                />\n              </View>\n              <View style={styles.inputContainer}>\n                <Text style={styles.inputLabel}>Width (ft)</Text>\n                <TextInput\n                  style={styles.input}\n                  value={vehicleInfo.width}\n                  onChangeText={(text) => setVehicleInfo(prev => ({ ...prev, width: text }))}\n                  placeholder=\"8.5\"\n                  keyboardType=\"numeric\"\n                />\n              </View>\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.inputLabel}>Number of Axles</Text>\n              <TextInput\n                style={styles.input}\n                value={vehicleInfo.axles}\n                onChangeText={(text) => setVehicleInfo(prev => ({ ...prev, axles: text }))}\n                placeholder=\"5\"\n                keyboardType=\"numeric\"\n              />\n            </View>\n\n            <TouchableOpacity\n              style={styles.checkboxRow}\n              onPress={() => setVehicleInfo(prev => ({ ...prev, hazmat: !prev.hazmat }))}\n            >\n              <View style={[styles.checkbox, vehicleInfo.hazmat && styles.checkboxChecked]}>\n                {vehicleInfo.hazmat && <CheckCircle size={16} color={colors.white} />}\n              </View>\n              <Text style={styles.checkboxLabel}>Carrying Hazardous Materials</Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Compliance Status */}\n          <View style={styles.section}>\n            <View style={styles.sectionHeader}>\n              <CheckCircle size={20} color={colors.success} />\n              <Text style={styles.sectionTitle}>Compliance Status</Text>\n            </View>\n            <View style={styles.complianceCard}>\n              <View style={styles.complianceRow}>\n                <CheckCircle size={16} color={colors.success} />\n                <Text style={styles.complianceText}>Hours of Service: Compliant</Text>\n              </View>\n              <View style={styles.complianceRow}>\n                <CheckCircle size={16} color={colors.success} />\n                <Text style={styles.complianceText}>Logbook: Current</Text>\n              </View>\n              <View style={styles.complianceRow}>\n                <CheckCircle size={16} color={colors.success} />\n                <Text style={styles.complianceText}>Inspection: Current</Text>\n              </View>\n              <View style={styles.complianceRow}>\n                <CheckCircle size={16} color={colors.success} />\n                <Text style={styles.complianceText}>Registration: Valid</Text>\n              </View>\n              <View style={styles.complianceRow}>\n                <CheckCircle size={16} color={colors.success} />\n                <Text style={styles.complianceText}>Insurance: Valid</Text>\n              </View>\n            </View>\n          </View>\n\n          {/* Warning */}\n          <View style={styles.warningCard}>\n            <AlertTriangle size={20} color={colors.warning} />\n            <View style={styles.warningContent}>\n              <Text style={styles.warningTitle}>Important Notice</Text>\n              <Text style={styles.warningText}>\n                Bypass approval is not guaranteed. If denied, you must proceed to the weigh station for inspection.\n              </Text>\n            </View>\n          </View>\n        </ScrollView>\n\n        <View style={styles.footer}>\n          <TouchableOpacity style={styles.cancelButton} onPress={onClose}>\n            <Text style={styles.cancelButtonText}>Cancel</Text>\n          </TouchableOpacity>\n          <TouchableOpacity \n            style={[styles.submitButton, loading.bypass && styles.submitButtonDisabled]} \n            onPress={handleSubmit}\n            disabled={loading.bypass}\n          >\n            {loading.bypass ? (\n              <ActivityIndicator size=\"small\" color={colors.white} />\n            ) : (\n              <Text style={styles.submitButtonText}>Request Bypass</Text>\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background.primary,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: colors.text.primary,\n  },\n  closeButton: {\n    padding: 4,\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 12,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: colors.text.primary,\n  },\n  stationCard: {\n    backgroundColor: colors.card,\n    borderRadius: 8,\n    padding: 16,\n  },\n  stationName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: colors.text.primary,\n    marginBottom: 4,\n  },\n  stationAddress: {\n    fontSize: 14,\n    color: colors.text.secondary,\n    marginBottom: 8,\n  },\n  stationMeta: {\n    flexDirection: 'row',\n    gap: 16,\n  },\n  stationMetaText: {\n    fontSize: 12,\n    color: colors.text.secondary,\n  },\n  inputRow: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 16,\n  },\n  inputContainer: {\n    flex: 1,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: colors.text.primary,\n    marginBottom: 6,\n  },\n  input: {\n    backgroundColor: colors.card,\n    borderRadius: 8,\n    padding: 12,\n    fontSize: 16,\n    color: colors.text.primary,\n    borderWidth: 1,\n    borderColor: colors.border,\n  },\n  checkboxRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n    marginTop: 8,\n  },\n  checkbox: {\n    width: 24,\n    height: 24,\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: colors.border,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  checkboxChecked: {\n    backgroundColor: colors.primary,\n    borderColor: colors.primary,\n  },\n  checkboxLabel: {\n    fontSize: 14,\n    color: colors.text.primary,\n  },\n  complianceCard: {\n    backgroundColor: colors.card,\n    borderRadius: 8,\n    padding: 16,\n    gap: 8,\n  },\n  complianceRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  complianceText: {\n    fontSize: 14,\n    color: colors.text.primary,\n  },\n  warningCard: {\n    backgroundColor: colors.card,\n    borderRadius: 8,\n    padding: 16,\n    flexDirection: 'row',\n    gap: 12,\n    borderLeftWidth: 4,\n    borderLeftColor: colors.warning,\n  },\n  warningContent: {\n    flex: 1,\n  },\n  warningTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: colors.warning,\n    marginBottom: 4,\n  },\n  warningText: {\n    fontSize: 12,\n    color: colors.text.secondary,\n    lineHeight: 16,\n  },\n  footer: {\n    flexDirection: 'row',\n    gap: 12,\n    padding: 16,\n    borderTopWidth: 1,\n    borderTopColor: colors.border,\n  },\n  cancelButton: {\n    flex: 1,\n    paddingVertical: 14,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.border,\n    alignItems: 'center',\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: colors.text.primary,\n  },\n  submitButton: {\n    flex: 1,\n    paddingVertical: 14,\n    borderRadius: 8,\n    backgroundColor: colors.primary,\n    alignItems: 'center',\n  },\n  submitButtonDisabled: {\n    opacity: 0.6,\n  },\n  submitButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: colors.white,\n  },\n});\n