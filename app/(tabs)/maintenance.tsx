import React, { useEffect, useState } from 'react';\nimport {\n  View,\n  Text,\n  ScrollView,\n  StyleSheet,\n  TouchableOpacity,\n  RefreshControl,\n  Alert,\n  Modal\n} from 'react-native';\nimport {\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  MapPin,\n  Phone,\n  Settings,\n  Star,\n  Wrench,\n  Zap,\n  TrendingUp,\n  Shield,\n  Calendar,\n  Database\n} from 'lucide-react-native';\nimport { Stack } from 'expo-router';\n\nimport { colors } from '@/constants/colors';\nimport { usePredictiveMaintenanceStore } from '@/store/predictiveMaintenanceStore';\nimport { MaintenancePrediction, MaintenanceAlert, RepairShop } from '@/types';\nimport VehicleHealthDashboard from '@/components/VehicleHealthDashboard';\nimport MaintenanceAlertCard from '@/components/MaintenanceAlertCard';\nimport PredictiveMaintenanceCard from '@/components/PredictiveMaintenanceCard';\nimport TruckFaxIntegration from '@/components/TruckFaxIntegration';\n\nconst MaintenancePage = () => {\n  const {\n    currentDiagnostics,\n    predictions,\n    alerts,\n    vehicleHealth,\n    nearbyShops,\n    isAnalyzing,\n    isLoadingShops,\n    lastAnalysis,\n    isSimulating,\n    truckFaxEnabled,\n    truckFaxData,\n    isLoadingTruckFax,\n    runPredictiveAnalysis,\n    dismissAlert,\n    findNearbyShops,\n    findTruckFaxCertifiedShops,\n    startSimulation,\n    stopSimulation\n  } = usePredictiveMaintenanceStore();\n\n  const [refreshing, setRefreshing] = useState(false);\n  const [selectedPrediction, setSelectedPrediction] = useState<MaintenancePrediction | null>(null);\n  const [showShopsModal, setShowShopsModal] = useState(false);\n  const [showTruckFaxModal, setShowTruckFaxModal] = useState(false);\n\n  useEffect(() => {\n    // Start simulation on component mount\n    if (!isSimulating) {\n      startSimulation();\n    }\n    \n    // Cleanup on unmount\n    return () => {\n      stopSimulation();\n    };\n  }, []);\n\n  const toggleSimulation = () => {\n    if (isSimulating) {\n      stopSimulation();\n    } else {\n      startSimulation();\n    }\n  };\n\n  const onRefresh = async () => {\n    setRefreshing(true);\n    await runPredictiveAnalysis();\n    setRefreshing(false);\n  };\n\n  const handlePredictionPress = (prediction: MaintenancePrediction) => {\n    setSelectedPrediction(prediction);\n    const location = { lat: 33.4484, lng: -112.0740 };\n    \n    if (truckFaxEnabled) {\n      findTruckFaxCertifiedShops(prediction.componentName, location);\n    } else {\n      findNearbyShops(prediction.componentName, location);\n    }\n    setShowShopsModal(true);\n  };\n\n  const handleAlertViewShops = (alert: MaintenanceAlert) => {\n    const location = { lat: 33.4484, lng: -112.0740 };\n    \n    if (truckFaxEnabled) {\n      findTruckFaxCertifiedShops(alert.component, location);\n    } else {\n      findNearbyShops(alert.component, location);\n    }\n    setShowShopsModal(true);\n  };\n\n  const handleScheduleMaintenance = (shop: RepairShop, prediction: MaintenancePrediction) => {\n    Alert.alert(\n      'Schedule Maintenance',\n      `Schedule ${prediction.componentName} service at ${shop.name}?`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Schedule',\n          onPress: () => {\n            // In a real app, this would integrate with the shop's booking system\n            Alert.alert('Success', 'Maintenance scheduled successfully!');\n            setShowShopsModal(false);\n          }\n        }\n      ]\n    );\n  };\n\n  const activeAlerts = alerts.filter(alert => !alert.dismissed && !alert.resolvedAt);\n\n  return (\n    <>\n      <Stack.Screen\n        options={{\n          title: 'AI Maintenance',\n          headerRight: () => (\n            <View style={styles.headerButtons}>\n              <TouchableOpacity onPress={() => setShowTruckFaxModal(true)} style={styles.headerButton}>\n                <Database \n                  color={truckFaxEnabled ? colors.secondary : colors.textSecondary} \n                  size={20} \n                />\n              </TouchableOpacity>\n              <TouchableOpacity onPress={toggleSimulation} style={styles.headerButton}>\n                <Activity \n                  color={isSimulating ? colors.secondary : colors.textSecondary} \n                  size={20} \n                />\n              </TouchableOpacity>\n              <TouchableOpacity onPress={() => {}} style={styles.headerButton}>\n                <Settings color={colors.text} size={22} />\n              </TouchableOpacity>\n            </View>\n          )\n        }}\n      />\n      \n      <ScrollView\n        style={styles.container}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n        }\n      >\n        {/* TruckFax Status Banner */}\n        {truckFaxEnabled && truckFaxData && (\n          <View style={styles.truckFaxBanner}>\n            <View style={styles.truckFaxInfo}>\n              <Database size={16} color={colors.primary} />\n              <Text style={styles.truckFaxText}>\n                Enhanced with TruckFax: {truckFaxData.year} {truckFaxData.make} {truckFaxData.model}\n              </Text>\n            </View>\n            {isLoadingTruckFax && (\n              <Text style={styles.truckFaxLoading}>Syncing...</Text>\n            )}\n          </View>\n        )}\n\n        {/* Vehicle Health Overview */}\n        {vehicleHealth && (\n          <View style={styles.section}>\n            <VehicleHealthDashboard \n              vehicleHealth={vehicleHealth}\n              onSystemPress={(system) => {\n                console.log('System pressed:', system);\n              }}\n            />\n          </View>\n        )}\n\n        {/* AI Analysis Status */}\n        <View style={styles.analysisCard}>\n          <View style={styles.analysisHeader}>\n            <Zap color={colors.primaryLight} size={20} />\n            <Text style={styles.analysisTitle}>AI Predictive Analysis</Text>\n            {isAnalyzing && <Activity color={colors.primaryLight} size={16} />}\n          </View>\n          <Text style={styles.analysisStatus}>\n            {isAnalyzing ? 'Analyzing vehicle data...' : \n             lastAnalysis ? `Last analysis: ${new Date(lastAnalysis).toLocaleTimeString()}` :\n             'No analysis performed yet'}\n          </Text>\n          {isSimulating && (\n            <Text style={styles.simulationStatus}>\n              ðŸ”„ Live simulation active - receiving diagnostic data\n            </Text>\n          )}\n          {truckFaxEnabled && (\n            <Text style={styles.truckFaxStatus}>\n              âš¡ Enhanced with TruckFax predictive insights\n            </Text>\n          )}\n          <TouchableOpacity\n            style={[styles.analyzeButton, isAnalyzing && styles.analyzeButtonDisabled]}\n            onPress={runPredictiveAnalysis}\n            disabled={isAnalyzing}\n          >\n            <Text style={styles.analyzeButtonText}>\n              {isAnalyzing ? 'Analyzing...' : 'Run Analysis'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n\n        {/* Active Alerts */}\n        {activeAlerts.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Active Alerts ({activeAlerts.length})</Text>\n            {activeAlerts.map(alert => (\n              <MaintenanceAlertCard\n                key={alert.id}\n                alert={alert}\n                onDismiss={dismissAlert}\n                onViewShops={handleAlertViewShops}\n              />\n            ))}\n          </View>\n        )}\n\n        {/* Maintenance Predictions */}\n        {predictions.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>AI Predictions ({predictions.length})</Text>\n            {predictions.map(prediction => (\n              <PredictiveMaintenanceCard\n                key={prediction.id}\n                prediction={prediction}\n                onPress={handlePredictionPress}\n              />\n            ))}\n          </View>\n        )}\n\n        {/* Current Diagnostics */}\n        {currentDiagnostics && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Live Diagnostics</Text>\n            <View style={styles.diagnosticsCard}>\n              <View style={styles.diagnosticsGrid}>\n                <View style={styles.diagnosticItem}>\n                  <Text style={styles.diagnosticLabel}>Engine Temp</Text>\n                  <Text style={[\n                    styles.diagnosticValue,\n                    { color: currentDiagnostics.engineTemp > 210 ? colors.danger : colors.text }\n                  ]}>\n                    {Math.round(currentDiagnostics.engineTemp)}Â°F\n                  </Text>\n                </View>\n                <View style={styles.diagnosticItem}>\n                  <Text style={styles.diagnosticLabel}>Oil Pressure</Text>\n                  <Text style={[\n                    styles.diagnosticValue,\n                    { color: currentDiagnostics.oilPressure < 30 ? colors.danger : colors.text }\n                  ]}>\n                    {Math.round(currentDiagnostics.oilPressure)} PSI\n                  </Text>\n                </View>\n                <View style={styles.diagnosticItem}>\n                  <Text style={styles.diagnosticLabel}>Brake Pressure</Text>\n                  <Text style={[\n                    styles.diagnosticValue,\n                    { color: currentDiagnostics.brakeSystemPressure < 80 ? colors.danger : colors.text }\n                  ]}>\n                    {Math.round(currentDiagnostics.brakeSystemPressure)} PSI\n                  </Text>\n                </View>\n                <View style={styles.diagnosticItem}>\n                  <Text style={styles.diagnosticLabel}>Battery</Text>\n                  <Text style={[\n                    styles.diagnosticValue,\n                    { color: currentDiagnostics.batteryVoltage < 12.4 ? colors.danger : colors.text }\n                  ]}>\n                    {currentDiagnostics.batteryVoltage.toFixed(1)}V\n                  </Text>\n                </View>\n              </View>\n              \n              <View style={styles.tirePressureSection}>\n                <Text style={styles.tirePressureTitle}>Tire Pressure</Text>\n                <View style={styles.tirePressureGrid}>\n                  <View style={styles.tireItem}>\n                    <Text style={styles.tireLabel}>FL</Text>\n                    <Text style={[\n                      styles.tireValue,\n                      { color: currentDiagnostics.tirePressure.frontLeft < 32 ? colors.danger : colors.text }\n                    ]}>\n                      {Math.round(currentDiagnostics.tirePressure.frontLeft)}\n                    </Text>\n                  </View>\n                  <View style={styles.tireItem}>\n                    <Text style={styles.tireLabel}>FR</Text>\n                    <Text style={[\n                      styles.tireValue,\n                      { color: currentDiagnostics.tirePressure.frontRight < 32 ? colors.danger : colors.text }\n                    ]}>\n                      {Math.round(currentDiagnostics.tirePressure.frontRight)}\n                    </Text>\n                  </View>\n                  <View style={styles.tireItem}>\n                    <Text style={styles.tireLabel}>RL</Text>\n                    <Text style={[\n                      styles.tireValue,\n                      { color: currentDiagnostics.tirePressure.rearLeft < 32 ? colors.danger : colors.text }\n                    ]}>\n                      {Math.round(currentDiagnostics.tirePressure.rearLeft)}\n                    </Text>\n                  </View>\n                  <View style={styles.tireItem}>\n                    <Text style={styles.tireLabel}>RR</Text>\n                    <Text style={[\n                      styles.tireValue,\n                      { color: currentDiagnostics.tirePressure.rearRight < 32 ? colors.danger : colors.text }\n                    ]}>\n                      {Math.round(currentDiagnostics.tirePressure.rearRight)}\n                    </Text>\n                  </View>\n                </View>\n              </View>\n              \n              {currentDiagnostics.faultCodes.length > 0 && (\n                <View style={styles.faultCodesSection}>\n                  <Text style={styles.faultCodesTitle}>Active Fault Codes</Text>\n                  <View style={styles.faultCodesList}>\n                    {currentDiagnostics.faultCodes.map(code => (\n                      <View key={code} style={styles.faultCodeBadge}>\n                        <Text style={styles.faultCodeText}>{code}</Text>\n                      </View>\n                    ))}\n                  </View>\n                </View>\n              )}\n            </View>\n          </View>\n        )}\n        \n        <View style={styles.footer} />\n      </ScrollView>\n\n      {/* Repair Shops Modal */}\n      <Modal\n        visible={showShopsModal}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n      >\n        <View style={styles.modalContainer}>\n          <View style={styles.modalHeader}>\n            <Text style={styles.modalTitle}>\n              {truckFaxEnabled ? 'TruckFax Certified Shops' : 'Nearby Repair Shops'}\n            </Text>\n            <TouchableOpacity\n              onPress={() => setShowShopsModal(false)}\n              style={styles.modalCloseButton}\n            >\n              <Text style={styles.modalCloseText}>Close</Text>\n            </TouchableOpacity>\n          </View>\n          \n          {selectedPrediction && (\n            <View style={styles.modalPredictionInfo}>\n              <Text style={styles.modalPredictionTitle}>\n                {selectedPrediction.componentName} Service\n              </Text>\n              <Text style={styles.modalPredictionCost}>\n                Estimated: ${selectedPrediction.estimatedCost}\n              </Text>\n            </View>\n          )}\n          \n          <ScrollView style={styles.modalContent}>\n            {isLoadingShops ? (\n              <View style={styles.loadingContainer}>\n                <Activity color={colors.primaryLight} size={24} />\n                <Text style={styles.loadingText}>\n                  {truckFaxEnabled ? 'Finding TruckFax certified shops...' : 'Finding nearby shops...'}\n                </Text>\n              </View>\n            ) : (\n              nearbyShops.map(shop => (\n                <View key={shop.id} style={styles.shopCard}>\n                  <View style={styles.shopHeader}>\n                    <Text style={styles.shopName}>{shop.name}</Text>\n                    <View style={styles.shopRating}>\n                      <Star color={colors.warning} size={14} fill={colors.warning} />\n                      <Text style={styles.shopRatingText}>\n                        {shop.rating} ({shop.reviewCount})\n                      </Text>\n                    </View>\n                  </View>\n                  \n                  <Text style={styles.shopAddress}>{shop.address}</Text>\n                  \n                  <View style={styles.shopDetails}>\n                    <View style={styles.shopDetailItem}>\n                      <MapPin color={colors.textSecondary} size={14} />\n                      <Text style={styles.shopDetailText}>{shop.distance} miles</Text>\n                    </View>\n                    <View style={styles.shopDetailItem}>\n                      <Clock color={colors.textSecondary} size={14} />\n                      <Text style={styles.shopDetailText}>{shop.availability}</Text>\n                    </View>\n                    <View style={styles.shopDetailItem}>\n                      <Text style={styles.shopCost}>${shop.estimatedCost}</Text>\n                    </View>\n                  </View>\n                  \n                  <View style={styles.shopSpecialties}>\n                    {shop.specialties.slice(0, 3).map(specialty => (\n                      <View key={specialty} style={styles.specialtyBadge}>\n                        <Text style={styles.specialtyText}>{specialty}</Text>\n                      </View>\n                    ))}\n                  </View>\n                  \n                  <View style={styles.shopCertifications}>\n                    {shop.certifications.slice(0, 2).map(cert => (\n                      <View key={cert} style={styles.certificationBadge}>\n                        <Text style={styles.certificationText}>{cert}</Text>\n                      </View>\n                    ))}\n                  </View>\n                  \n                  <View style={styles.shopActions}>\n                    <TouchableOpacity\n                      style={styles.shopCallButton}\n                      onPress={() => {}}\n                    >\n                      <Phone color={colors.primaryLight} size={16} />\n                      <Text style={styles.shopCallText}>Call</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                      style={styles.shopScheduleButton}\n                      onPress={() => selectedPrediction && handleScheduleMaintenance(shop, selectedPrediction)}\n                    >\n                      <Text style={styles.shopScheduleText}>Schedule</Text>\n                    </TouchableOpacity>\n                  </View>\n                </View>\n              ))\n            )}\n          </ScrollView>\n        </View>\n      </Modal>\n\n      {/* TruckFax Integration Modal */}\n      <TruckFaxIntegration\n        visible={showTruckFaxModal}\n        onClose={() => setShowTruckFaxModal(false)}\n      />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  headerButtons: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  headerButton: {\n    padding: 8,\n  },\n  truckFaxBanner: {\n    backgroundColor: colors.primaryLight,\n    borderRadius: 8,\n    padding: 12,\n    margin: 16,\n    marginBottom: 0,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  truckFaxInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    flex: 1\n  },\n  truckFaxText: {\n    fontSize: 13,\n    color: colors.primary,\n    fontWeight: '500',\n    flex: 1\n  },\n  truckFaxLoading: {\n    fontSize: 12,\n    color: colors.primary,\n    fontStyle: 'italic'\n  },\n  section: {\n    margin: 16,\n    marginTop: 0,\n  },\n  sectionTitle: {\n    color: colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 12,\n  },\n  analysisCard: {\n    backgroundColor: colors.card,\n    margin: 16,\n    marginTop: 0,\n    borderRadius: 12,\n    padding: 16,\n  },\n  analysisHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  analysisTitle: {\n    color: colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n    flex: 1,\n  },\n  analysisStatus: {\n    color: colors.textSecondary,\n    fontSize: 14,\n    marginBottom: 8,\n  },\n  simulationStatus: {\n    color: colors.secondary,\n    fontSize: 12,\n    marginBottom: 8,\n    fontStyle: 'italic',\n  },\n  truckFaxStatus: {\n    color: colors.primary,\n    fontSize: 12,\n    marginBottom: 16,\n    fontStyle: 'italic',\n  },\n  analyzeButton: {\n    backgroundColor: colors.primaryLight,\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  analyzeButtonDisabled: {\n    opacity: 0.6,\n  },\n  analyzeButtonText: {\n    color: colors.text,\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  diagnosticsCard: {\n    backgroundColor: colors.card,\n    borderRadius: 12,\n    padding: 16,\n  },\n  diagnosticsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 16,\n    marginBottom: 20,\n  },\n  diagnosticItem: {\n    width: '45%',\n    alignItems: 'center',\n  },\n  diagnosticLabel: {\n    color: colors.textSecondary,\n    fontSize: 12,\n    marginBottom: 4,\n  },\n  diagnosticValue: {\n    color: colors.text,\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  tirePressureSection: {\n    borderTopWidth: 1,\n    borderTopColor: colors.border,\n    paddingTop: 16,\n    marginBottom: 16,\n  },\n  tirePressureTitle: {\n    color: colors.text,\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 12,\n    textAlign: 'center',\n  },\n  tirePressureGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  tireItem: {\n    alignItems: 'center',\n  },\n  tireLabel: {\n    color: colors.textSecondary,\n    fontSize: 10,\n    marginBottom: 4,\n  },\n  tireValue: {\n    color: colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  faultCodesSection: {\n    borderTopWidth: 1,\n    borderTopColor: colors.border,\n    paddingTop: 16,\n  },\n  faultCodesTitle: {\n    color: colors.text,\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 12,\n  },\n  faultCodesList: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  faultCodeBadge: {\n    backgroundColor: colors.danger,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  faultCodeText: {\n    color: colors.text,\n    fontSize: 10,\n    fontWeight: '600',\n  },\n  footer: {\n    height: 20,\n  },\n  modalContainer: {\n    flex: 1,\n    backgroundColor: colors.background,\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n  },\n  modalTitle: {\n    color: colors.text,\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  modalCloseButton: {\n    padding: 8,\n  },\n  modalCloseText: {\n    color: colors.primaryLight,\n    fontSize: 16,\n  },\n  modalPredictionInfo: {\n    padding: 16,\n    backgroundColor: colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: colors.border,\n  },\n  modalPredictionTitle: {\n    color: colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  modalPredictionCost: {\n    color: colors.warning,\n    fontSize: 14,\n    marginTop: 4,\n  },\n  modalContent: {\n    flex: 1,\n  },\n  loadingContainer: {\n    alignItems: 'center',\n    padding: 32,\n  },\n  loadingText: {\n    color: colors.textSecondary,\n    fontSize: 14,\n    marginTop: 12,\n  },\n  shopCard: {\n    backgroundColor: colors.card,\n    margin: 16,\n    borderRadius: 12,\n    padding: 16,\n  },\n  shopHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  shopName: {\n    color: colors.text,\n    fontSize: 16,\n    fontWeight: '600',\n    flex: 1,\n  },\n  shopRating: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  shopRatingText: {\n    color: colors.textSecondary,\n    fontSize: 12,\n  },\n  shopAddress: {\n    color: colors.textSecondary,\n    fontSize: 14,\n    marginBottom: 12,\n  },\n  shopDetails: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  shopDetailItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  shopDetailText: {\n    color: colors.textSecondary,\n    fontSize: 12,\n  },\n  shopCost: {\n    color: colors.warning,\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  shopSpecialties: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n    marginBottom: 12,\n  },\n  specialtyBadge: {\n    backgroundColor: colors.border,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  specialtyText: {\n    color: colors.textSecondary,\n    fontSize: 10,\n  },\n  shopCertifications: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n    marginBottom: 16,\n  },\n  certificationBadge: {\n    backgroundColor: colors.secondary,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  certificationText: {\n    color: colors.white,\n    fontSize: 10,\n    fontWeight: '500',\n  },\n  shopActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  shopCallButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.primaryLight,\n    flex: 1,\n    justifyContent: 'center',\n  },\n  shopCallText: {\n    color: colors.primaryLight,\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  shopScheduleButton: {\n    backgroundColor: colors.primaryLight,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    flex: 1,\n    alignItems: 'center',\n  },\n  shopScheduleText: {\n    color: colors.text,\n    fontSize: 14,\n    fontWeight: '600',\n  },\n});\n\nexport default MaintenancePage;"