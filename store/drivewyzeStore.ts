import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { \n  DrivewyzeWeighStation, \n  DrivewyzeBypassRequest, \n  DrivewyzeBypassResponse, \n  DrivewyzeNotification,\n  DrivewyzeRoute,\n  DrivewyzeAnalytics,\n  DrivewyzeConfig \n} from '@/types';\nimport { drivewyzeApi } from '@/services/drivewyzeApi';\n\ninterface DrivewyzeState {\n  // Configuration\n  config: DrivewyzeConfig;\n  \n  // Weigh stations\n  weighStations: DrivewyzeWeighStation[];\n  nearbyStations: DrivewyzeWeighStation[];\n  \n  // Bypass requests\n  bypassRequests: DrivewyzeBypassResponse[];\n  activeBypass: DrivewyzeBypassResponse | null;\n  \n  // Notifications\n  notifications: DrivewyzeNotification[];\n  unreadNotifications: number;\n  \n  // Route information\n  currentRoute: DrivewyzeRoute | null;\n  \n  // Analytics\n  analytics: DrivewyzeAnalytics | null;\n  \n  // Loading states\n  loading: {\n    weighStations: boolean;\n    bypass: boolean;\n    notifications: boolean;\n    route: boolean;\n    analytics: boolean;\n  };\n  \n  // Error states\n  errors: {\n    weighStations: string | null;\n    bypass: string | null;\n    notifications: string | null;\n    route: string | null;\n    analytics: string | null;\n  };\n  \n  // Actions\n  updateConfig: (config: Partial<DrivewyzeConfig>) => void;\n  fetchWeighStationsOnRoute: (origin: { latitude: number; longitude: number }, destination: { latitude: number; longitude: number }) => Promise<void>;\n  fetchNearbyWeighStations: (location: { latitude: number; longitude: number }, radius?: number) => Promise<void>;\n  requestBypass: (request: DrivewyzeBypassRequest) => Promise<DrivewyzeBypassResponse | null>;\n  fetchNotifications: () => Promise<void>;\n  markNotificationAsRead: (notificationId: string) => void;\n  clearNotification: (notificationId: string) => void;\n  fetchRouteWithWeighStations: (origin: string, destination: string) => Promise<void>;\n  fetchAnalytics: () => Promise<void>;\n  clearActiveBypass: () => void;\n  refreshWeighStationStatus: (stationId: string) => Promise<void>;\n  clearErrors: () => void;\n}\n\nexport const useDrivewyzeStore = create<DrivewyzeState>()(persist(\n  (set, get) => ({\n    // Initial state\n    config: {\n      apiKey: '',\n      deviceId: '',\n      enableNotifications: true,\n      autoBypassRequest: false,\n      notificationRadius: 25,\n      updateInterval: 5\n    },\n    \n    weighStations: [],\n    nearbyStations: [],\n    bypassRequests: [],\n    activeBypass: null,\n    notifications: [],\n    unreadNotifications: 0,\n    currentRoute: null,\n    analytics: null,\n    \n    loading: {\n      weighStations: false,\n      bypass: false,\n      notifications: false,\n      route: false,\n      analytics: false\n    },\n    \n    errors: {\n      weighStations: null,\n      bypass: null,\n      notifications: null,\n      route: null,\n      analytics: null\n    },\n    \n    // Actions\n    updateConfig: (newConfig) => {\n      set((state) => ({\n        config: { ...state.config, ...newConfig }\n      }));\n    },\n    \n    fetchWeighStationsOnRoute: async (origin, destination) => {\n      set((state) => ({\n        loading: { ...state.loading, weighStations: true },\n        errors: { ...state.errors, weighStations: null }\n      }));\n      \n      try {\n        const stations = await drivewyzeApi.getWeighStationsOnRoute(origin, destination);\n        set((state) => ({\n          weighStations: stations,\n          loading: { ...state.loading, weighStations: false }\n        }));\n      } catch (error) {\n        set((state) => ({\n          loading: { ...state.loading, weighStations: false },\n          errors: { ...state.errors, weighStations: 'Failed to fetch weigh stations' }\n        }));\n      }\n    },\n    \n    fetchNearbyWeighStations: async (location, radius = 25) => {\n      set((state) => ({\n        loading: { ...state.loading, weighStations: true },\n        errors: { ...state.errors, weighStations: null }\n      }));\n      \n      try {\n        const stations = await drivewyzeApi.getNearbyWeighStations(location, radius);\n        set((state) => ({\n          nearbyStations: stations,\n          loading: { ...state.loading, weighStations: false }\n        }));\n      } catch (error) {\n        set((state) => ({\n          loading: { ...state.loading, weighStations: false },\n          errors: { ...state.errors, weighStations: 'Failed to fetch nearby weigh stations' }\n        }));\n      }\n    },\n    \n    requestBypass: async (request) => {\n      set((state) => ({\n        loading: { ...state.loading, bypass: true },\n        errors: { ...state.errors, bypass: null }\n      }));\n      \n      try {\n        const response = await drivewyzeApi.requestBypass(request);\n        set((state) => ({\n          bypassRequests: [...state.bypassRequests, response],\n          activeBypass: response.status === 'approved' ? response : null,\n          loading: { ...state.loading, bypass: false }\n        }));\n        return response;\n      } catch (error) {\n        set((state) => ({\n          loading: { ...state.loading, bypass: false },\n          errors: { ...state.errors, bypass: 'Failed to request bypass' }\n        }));\n        return null;\n      }\n    },\n    \n    fetchNotifications: async () => {\n      set((state) => ({\n        loading: { ...state.loading, notifications: true },\n        errors: { ...state.errors, notifications: null }\n      }));\n      \n      try {\n        const notifications = await drivewyzeApi.getNotifications();\n        const unreadCount = notifications.filter(n => !n.actionRequired).length;\n        set((state) => ({\n          notifications,\n          unreadNotifications: unreadCount,\n          loading: { ...state.loading, notifications: false }\n        }));\n      } catch (error) {\n        set((state) => ({\n          loading: { ...state.loading, notifications: false },\n          errors: { ...state.errors, notifications: 'Failed to fetch notifications' }\n        }));\n      }\n    },\n    \n    markNotificationAsRead: (notificationId) => {\n      set((state) => ({\n        notifications: state.notifications.map(n => \n          n.id === notificationId ? { ...n, actionRequired: false } : n\n        ),\n        unreadNotifications: Math.max(0, state.unreadNotifications - 1)\n      }));\n    },\n    \n    clearNotification: (notificationId) => {\n      set((state) => ({\n        notifications: state.notifications.filter(n => n.id !== notificationId),\n        unreadNotifications: state.notifications.find(n => n.id === notificationId)?.actionRequired \n          ? Math.max(0, state.unreadNotifications - 1) \n          : state.unreadNotifications\n      }));\n    },\n    \n    fetchRouteWithWeighStations: async (origin, destination) => {\n      set((state) => ({\n        loading: { ...state.loading, route: true },\n        errors: { ...state.errors, route: null }\n      }));\n      \n      try {\n        const route = await drivewyzeApi.getRouteWithWeighStations(origin, destination);\n        set((state) => ({\n          currentRoute: route,\n          weighStations: route.weighStations,\n          loading: { ...state.loading, route: false }\n        }));\n      } catch (error) {\n        set((state) => ({\n          loading: { ...state.loading, route: false },\n          errors: { ...state.errors, route: 'Failed to fetch route information' }\n        }));\n      }\n    },\n    \n    fetchAnalytics: async () => {\n      set((state) => ({\n        loading: { ...state.loading, analytics: true },\n        errors: { ...state.errors, analytics: null }\n      }));\n      \n      try {\n        const analytics = await drivewyzeApi.getAnalytics();\n        set((state) => ({\n          analytics,\n          loading: { ...state.loading, analytics: false }\n        }));\n      } catch (error) {\n        set((state) => ({\n          loading: { ...state.loading, analytics: false },\n          errors: { ...state.errors, analytics: 'Failed to fetch analytics' }\n        }));\n      }\n    },\n    \n    clearActiveBypass: () => {\n      set({ activeBypass: null });\n    },\n    \n    refreshWeighStationStatus: async (stationId) => {\n      try {\n        const updatedStation = await drivewyzeApi.getWeighStationStatus(stationId);\n        if (updatedStation) {\n          set((state) => ({\n            weighStations: state.weighStations.map(station => \n              station.id === stationId ? updatedStation : station\n            ),\n            nearbyStations: state.nearbyStations.map(station => \n              station.id === stationId ? updatedStation : station\n            )\n          }));\n        }\n      } catch (error) {\n        console.error('Failed to refresh weigh station status:', error);\n      }\n    },\n    \n    clearErrors: () => {\n      set({\n        errors: {\n          weighStations: null,\n          bypass: null,\n          notifications: null,\n          route: null,\n          analytics: null\n        }\n      });\n    }\n  }),\n  {\n    name: 'drivewyze-store',\n    storage: createJSONStorage(() => AsyncStorage),\n    partialize: (state) => ({\n      config: state.config,\n      bypassRequests: state.bypassRequests,\n      analytics: state.analytics\n    })\n  }\n));\n